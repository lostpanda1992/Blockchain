Solidity中的变量类型：数值类型，引用类型：包括数组和结构体，映射类型: Solidity里的哈希表
包含pure关键字的函数，不能读取也不能写入存储在链上的状态变量
包含view关键字的函数，能读取但也不能写入状态变量
returns加在函数名后面，用于声明返回的变量类型及变量名；
return用于函数主体中，返回指定的变量
引用类型(Reference Type)：包括数组（array），结构体（struct）和映射（mapping）
solidity数据存储位置有三类：storage，memory和calldata
storage类型的数据存在链上，类似计算机的硬盘，消耗gas多；
memory和calldata类型的临时存在内存里，消耗gas少。
memory：函数里的参数和临时变量一般用memory，存储在内存中，不上链
与memory的不同点在于calldata变量不能修改（immutable），一般用于函数的参数。
storage（合约的状态变量）赋值给本地storage（函数里的）时候，会创建引用，改变新变量会影响原变量
storage赋值给memory，会创建独立的复本，修改其中一个不会影响另一个；反之亦然。
Solidity中变量按作用域划分有三种，分别是状态变，局部变和全局变量
状态变量是数据存储在链上的变量，所有合约内函数都可以访问 ，gas消耗高
全局变量是全局范围工作的变量，都是solidity预留关键字
数组分为固定长度数组和可变长度数组两种：
映射的_KeyType只能选择solidity默认的类型，比如uint，address等，不能用自定义的结构体
映射的存储位置必须是storage，因此可以用于合约的状态变量
如果映射声明为public，那么solidity会自动给你创建一个getter函数，可以通过Key来查询对应的Value
constant变量必须在声明的时候初始化，之后再也不能改变。
immutable变量可以在声明时或构造函数中初始化，因此更加灵活
构造函数（constructor）是一种特殊的函数，每个合约可以定义一个，并在部署合约的时候自动运行一次
修饰器（modifier）是solidity特有的语法，类似于面向对象编程中的decorator，声明函数拥有的特性，并减少代码冗余。\
modifier的主要使用场景是运行函数前的检查，例如地址，变量，余额
Solidity中的事件（event）是EVM上日志的抽象，它具有两个特点：
响应：应用程序（ether.js）可以通过RPC接口订阅和监听这些事件，并在前端做响应。
经济：事件是EVM上比较经济的存储数据的方式，每个大概消耗2,000 gas；
相比之下，链上存储一个新变量至少需要20,000 gas
继承规则：virtual: 父合约中的函数，如果希望子合约重写，需要加上virtual关键字。
override：子合约重写了父合约中的函数，需要加上override关键字。
注意：用override修饰public变量，会重写与变量同名的getter函数
solidity的合约可以继承多个合约。规则：继承时要按辈分最高到最低的顺序排
Solidity中的修饰器（Modifier）同样可以继承，用法与函数继承类似，在相应的地方加virtual和override关键字即可。
子合约有两种方式调用父合约的函数，直接调用和利用super关键字。
如果一个智能合约里至少有一个未实现的函数，即某个函数缺少主体{}中的内容，则必须将该合约标为abstract，不然编译会报错；
另外，未实现的函数需要加virtual，以便子合约重写。
接口类似于抽象合约，但它不实现任何功能。接口的规则：
不能包含状态变量  不能包含构造函数  不能继承除接口外的其他合约
所有函数都必须是external且不能有函数体   继承接口的合约必须实现接口定义的所有功能
如果智能合约实现了某种接口（比如ERC20或ERC721），其他Dapps和智能合约就知道如何与它交互。因为接口提供了两个重要的信息：
合约里每个函数的bytes4选择器，以及基于它们的函数签名函数名(每个参数类型）。 接口id（更多信息见EIP165）
solidity三种抛出异常的方法：error，require和assert
error是solidity 0.8.4版本新加的内容，方便且高效（省gas）地向用户解释操作失败的原因，同时还可以在抛出异常的同时携带参数
require命令是solidity 0.8版本之前抛出异常的常用方法，目前很多主流合约仍然还在使用它。
它很好用，唯一的缺点就是gas随着描述异常的字符串长度增加，比error命令要高。
assert命令一般用于程序员写程序debug，因为它不能解释抛出异常的原因（比require少个字符串）。
solidity中允许函数进行重载（overloading），即名字相同但输入参数类型不同的函数可以同时存在，他们被视为不同的函数。注意，solidity不允许修饰器（modifier）重载。
solidity支持利用import关键字导入其他合约中的全局符号（简单理解为外部源代码），
Solidity支持两种特殊的回调函数，receive()和fallback()，他们主要在两种情况下被使用：
接收ETH      处理合约中不存在的函数调用（代理合约proxy contract）
receive()只用于处理接收ETH。一个合约最多有一个receive()函数，声明方式与一般函数不一样，不需要function关键字：receive() external payable { ... }。
receive()函数不能有任何的参数，不能返回任何值，必须包含external和payable。
fallback()函数会在调用合约不存在的函数时被触发。可用于接收ETH，也可以用于代理合约proxy contract。fallback()声明时不需要function关键字，必须由external修饰，一般也会用payable修饰，用于接收ETH:fallback() external payable { ... }
合约接收ETH时，msg.data为空且存在receive()时，会触发receive()；msg.data不为空或不存在receive()时，会触发fallback()，此时fallback()必须为payable。
receive()和payable fallback()均不存在的时候，向合约发送ETH将会报错。
Solidity有三种方法向其他合约发送ETH，他们是：transfer()，send()和call()，其中call()是被鼓励的用法
transfer： 用法是接收方地址.transfer(发送ETH数额)。 transfer()的gas限制是2300，足够用于转账，但对方合约的fallback()或receive()函数不能实现太复杂的逻辑。 transfer()如果转账失败，会自动revert（回滚交易）。
send：用法是接收方地址.send(发送ETH数额)。send()的gas限制是2300，足够用于转账，但对方合约的fallback()或receive()函数不能实现太复杂的逻辑。
send()如果转账失败，不会revert。send()的返回值是bool，代表着转账成功或失败，需要额外代码处理一下。
call：用法是接收方地址.call{value: 发送ETH数额}("")。call()没有gas限制，可以支持对方合约fallback()或receive()函数实现复杂逻辑。
call()如果转账失败，不会revert。 call()的返回值是(bool, data)，其中bool代表着转账成功或失败，需要额外代码处理一下。
call 是address类型的低级成员函数，它用来与其他合约交互。它的返回值为(bool, data)，分别对应call是否成功以及目标函数的返回值。
call是solidity官方推荐的通过触发fallback或receive函数发送ETH的方法。不推荐用call来调用另一个合约，因为当你调用不安全合约的函数时，你就把主动权交给了它。推荐的方法仍是声明合约变量后调用函数，见第21讲：调用其他合约
当我们不知道对方合约的源代码或ABI，就没法生成合约变量；这时，我们仍可以通过call调用对方合约的函数。
delegatecall与call类似，是solidity中地址类型的低级成员函数。delegate中是委托/代表的意思，那么delegatecall委托了什么？
当用户A通过合约B来call合约C的时候，执行的是合约C的函数，语境(Context，可以理解为包含变量和状态的环境)也是合约C的：msg.sender是B的地址，并且如果函数改变一些状态变量，产生的效果会作用于合约C的变量上
而当用户A通过合约B来delegatecall合约C的时候，执行的是合约C的函数，但是语境仍是合约B的：msg.sender是A的地址，并且如果函数改变一些状态变量，产生的效果会作用于合约B的变量上。
ABI (Application Binary Interface，应用二进制接口)是与以太坊智能合约交互的标准。数据基于他们的类型编码；并且由于编码后不包含类型信息，解码时需要注明它们的类型。
Solidity中，ABI编码有4个函数：abi.encode, abi.encodePacked, abi.encodeWithSignature, abi.encodeWithSelector
当我们调用智能合约时，本质上是向目标合约发送了一段calldata，发送的calldata中前4个字节是selector（函数选择器）。
method id定义为函数签名的Keccak哈希后的前4个字节，当selector与method id相匹配时，即表示调用该函数，那么函数签名是什么？
其实在第21讲中，我们简单介绍了函数签名，为"函数名（逗号分隔的参数类型)"。举个例子，上面代码中mint的函数签名为"mint(address)"。
在同一个智能合约中，不同的函数有不同的函数签名，因此我们可以通过函数签名来确定要调用哪个函数
在solidity中，try-catch只能被用于external函数或创建合约时constructor（被视为external函数）的调用
其中externalContract.f()是某个外部合约的函数调用，try模块在调用成功的情况下运行，而catch模块则在调用失败时运行。
同样可以使用this.f()来替代externalContract.f()，this.f()也被视作为外部调用，但不可在构造函数中使用，因为此时合约还未创建。
ERC20是以太坊上的代币标准，来自2015年11月V神参与的EIP20。它实现了代币转账的基本逻辑：
账户余额 转账 授权转账 代币总供给 代币信息（可选）：名称，代号，小数位数
之所以需要定义接口，是因为有了规范后，就存在所有的ERC20代币都通用的函数名称，输入参数，输出参数。
通过ERC165标准，智能合约可以声明它支持的接口，供其他合约检查。
代理模式将合约数据和逻辑分开，分别保存在不同合约中。我们拿上图中简单的代理合约为例，数据（状态变量）存储在代理合约中，而逻辑（函数）保存在另一个逻辑合约中。
代理合约（Proxy）通过delegatecall，将函数调用全权委托给逻辑合约（Implementation）执行，再把最终的结果返回给调用者（Caller）。
这一讲，我们介绍了代理合约中的“选择器冲突”，以及如何利用透明代理避免这个问题。透明代理的逻辑简单，通过限制管理员调用逻辑合约解决“选择器冲突”问题。它也有缺点，每次用户调用函数时，都会多一步是否为管理员的检查，消耗更多gas。
UUPS（universal upgradeable proxy standard，通用可升级代理）将升级函数放在逻辑合约中。这样一来，如果有其它函数与升级函数存在“选择器冲突”，编译时就会报错。
如果用户A通过合约B（代理合约）去delegatecall合约C（逻辑合约），语境仍是合约B的语境，msg.sender仍是用户A而不是合约B。因此，UUPS合约可以将升级函数放在逻辑合约中，并检查调用者是否为管理员。
目前主要有两种办法来预防可能的重入攻击漏洞： 检查-影响-交互模式（checks-effect-interaction）和重入锁
重入锁是一种防止重入函数的修饰器（modifier），它包含一个默认为0的状态变量_status。
被nonReentrant重入锁修饰的函数，在第一次调用时会检查_status是否为0，紧接着将_status的值改为1，调用结束后才会再改为0。
选择器碰撞: 以太坊智能合约中，函数选择器是函数签名 "<function name>(<function input types>)" 的哈希值的前4个字节（8位十六进制）。当用户调用合约的函数时，calldata的前4字节就是目标函数的选择器，决定了调用哪个函数。






































